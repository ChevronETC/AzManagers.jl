name: Tests
on: [push, pull_request]
jobs:
  test:

    env:
      TENANT_ID: "${{ secrets.TENANT_ID }}" 
      SUBSCRIPTION_ID: "${{ secrets.SUBSCRIPTION_ID }}"
      RESOURCE_GROUP: "${{ matrix.os }}-${{ matrix.julia-version }}-${{ github.run_id }}"
      CLIENT_ID: "${{ secrets.CLIENT_ID }}"
      CLIENT_SECRET: "${{ secrets.CLIENT_SECRET }}"
      GALLERY_NAME: "${{ github.run_id }}${{ matrix.julia-version }}gallery"
      IMAGE_NAME: "${{ matrix.os }}-${{ matrix.julia-version }}-${{ github.run_id }}-image"
      VM_NAME: "${{ matrix.os }}-${{ matrix.julia-version }}-${{ github.run_id }}-vm"
      PUBLIC_IP_NAME: "${{ matrix.os }}-${{ matrix.julia-version }}-${{ github.run_id }}-pubip"
      VNET_NAME: "${{ matrix.os }}-${{ matrix.julia-version }}-${{ github.run_id }}-vnet"
      SUBNET_NAME: "default"
      COMMIT_SHA: "${{ github.sha }}"
      JULIA_VERSION: "${{ matrix.julia-version }}"

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        julia-version: [1.5] #1.0
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v1.0.0

      - name: Create an SSH Key Pair
        run: ssh-keygen -f /home/runner/.ssh/azmanagers_rsa -N ''

      - uses: azure/login@v1.1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group, Shared Image Gallery, Image Definition, VNet and Subnet
        run: |
          az group create                -g "$RESOURCE_GROUP" -l southcentralus
          az group wait                  -g "$RESOURCE_GROUP" --created 
          az sig create                  -g "$RESOURCE_GROUP" -r "$GALLERY_NAME"
          az sig image-definition create -g "$RESOURCE_GROUP" -r "$GALLERY_NAME" -i "$IMAGE_NAME" -p "canonical" -f "0001-com-ubuntu-server-focal" -s "20_04-lts" --os-type linux
          az network vnet create         -g "$RESOURCE_GROUP" -n "$VNET_NAME" --subnet-name "$SUBNET_NAME"
          az vm create                   -g "$RESOURCE_GROUP" -n "temp-vm" --image UbuntuLTS --public-ip-address "$PUBLIC_IP_NAME" --subnet "$SUBNET_NAME" --vnet-name "$VNET_NAME" --ssh-key-values @/home/runner/.ssh/azmanagers_rsa.pub --admin-username cvx

      # could use detach functionality from AzManagers in place of ssh here
      - name: Run the unit tests
        run: |
          ipaddress=$(az network public-ip show -g "$RESOURCE_GROUP" -n "temp-vm" | jq '.ipAddress' | cut -d "\"" -f 2)
          echo "$ipaddress"
      #     scp -o StrictHostKeyChecking=no -i /home/runner/.ssh/azmanagers_rsa /home/runner/.ssh/azmanagers_rsa.pub cvx@$ipaddress:/home/cvx/.ssh/azmanagers_rsa.pub
      #     scp -o StrictHostKeyChecking=no -i /home/runner/.ssh/azmanagers_rsa /home/runner/.ssh/azmanagers_rsa cvx@$ipaddress:/home/cvx/.ssh/azmanagers_rsa
      #     ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/azmanagers_rsa cvx@$ipaddress "julia --code-coverage=user -e 'using Pkg; Pkg.test(\"AzManagers\"; coverage=true)'"
      #     ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/azmanagers_rsa cvx@$ipaddress "julia -e 'include(\"/home/cvx/julia-codecov.jl\")'"
      #     lcovpath=$(ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/azmanagers_rsa cvx@$ipaddress "find -name lcov.info")
      #     scp -o StrictHostKeyChecking=no -i /home/runner/.ssh/azmanagers_rsa cvx@$ipaddress:$lcovpath /home/runner/lcov.info

      # - name: Template the Packer Image file
      #   uses: cuchi/jinja2-action@v1.2.0
      #   with:
      #     template: /home/runner/work/AzManagers.jl/AzManagers.jl/templates/cofii-base.json.j2
      #     output_file: /home/runner/work/AzManagers.jl/AzManagers.jl/templates/cofii-base.json

      # - name: Template the AzManagers Setup script
      #   uses: cuchi/jinja2-action@v1.2.0
      #   with:
      #     template: /home/runner/work/AzManagers.jl/AzManagers.jl/templates/azmanagers-setup.jl.j2
      #     output_file: /home/runner/work/AzManagers.jl/AzManagers.jl/templates/azmanagers-setup.jl

      # - name: Install Packer
      #   run: |
      #     curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
      #     sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
      #     sudo apt-get update && sudo apt-get install packer

      # - name: Build Packer Image
      #   run: packer build -color=false -timestamp-ui /home/runner/work/AzManagers.jl/AzManagers.jl/templates/cofii-base.json

      # - name: Create Master VM
      #   run: az vm create -g "$RESOURCE_GROUP" -n "$VM_NAME" --image "$IMAGE_NAME" --public-ip-address "$PUBLIC_IP_NAME" --subnet "$SUBNET_NAME" --vnet-name "$VNET_NAME" --ssh-key-values @/home/runner/.ssh/azmanagers_rsa.pub --admin-username cvx

      # # could use detach functionality from AzManagers in place of ssh here
      # - name: Run the unit tests
      #   run: |
      #     ipaddress=$(az network public-ip show -g "$RESOURCE_GROUP" -n "$PUBLIC_IP_NAME" | jq '.ipAddress' | cut -d "\"" -f 2)
      #     scp -o StrictHostKeyChecking=no -i /home/runner/.ssh/azmanagers_rsa /home/runner/.ssh/azmanagers_rsa.pub cvx@$ipaddress:/home/cvx/.ssh/azmanagers_rsa.pub
      #     scp -o StrictHostKeyChecking=no -i /home/runner/.ssh/azmanagers_rsa /home/runner/.ssh/azmanagers_rsa cvx@$ipaddress:/home/cvx/.ssh/azmanagers_rsa
      #     ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/azmanagers_rsa cvx@$ipaddress "julia --code-coverage=user -e 'using Pkg; Pkg.test(\"AzManagers\"; coverage=true)'"
      #     ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/azmanagers_rsa cvx@$ipaddress "julia -e 'include(\"/home/cvx/julia-codecov.jl\")'"
      #     lcovpath=$(ssh -o StrictHostKeyChecking=no -i /home/runner/.ssh/azmanagers_rsa cvx@$ipaddress "find -name lcov.info")
      #     scp -o StrictHostKeyChecking=no -i /home/runner/.ssh/azmanagers_rsa cvx@$ipaddress:$lcovpath /home/runner/lcov.info

      # - uses: codecov/codecov-action@v1
      #   with:
      #     file: /home/runner/lcov.info

      # - name: Delete CI Resource Group
      #   run: |
      #     az group delete -n "${{ matrix.os }}-${{ matrix.julia-version }}-${{ github.run_id }}" --yes
      #   if: ${{ always() }}
