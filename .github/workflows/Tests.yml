name: Tests
on: [push, pull_request]
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: [1.5] #1.0
        os: [ubuntu-latest] 
    steps:
      - uses: actions/checkout@v1.0.0

      - uses: azure/login@v1.1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group, Shared Image Gallery and Image Definition
        run: |
          az group create -l southcentralus -n "${{ matrix.os }}-${{ matrix.julia-version }}-${{ github.run_id }}"
          az group wait --created --resource-group "${{ matrix.os }}-${{ matrix.julia-version }}-${{ github.run_id }}"
          az sig create -g "${{ matrix.os }}-${{ matrix.julia-version }}-${{ github.run_id }}" -r "sig${{ github.run_id }}${{ matrix.julia-version }}"
          az sig image-definition create -g "${{ matrix.os }}-${{ matrix.julia-version }}-${{ github.run_id }}" --gallery-name "sig${{ github.run_id }}${{ matrix.julia-version }}" --gallery-image-definition "unit-test-image" --publisher "canonical" --offer "0001-com-ubuntu-server-focal" --sku "20_04-lts" --os-type linux

      - name: Create an SSH Key
        run: |
          ssh-keygen -f /home/runner/.ssh/azmanagers_rsa -N ''

      # - name: Install SSH key
      #   uses: shimataro/ssh-key-action@v2
      #   with:
      #     key: ${{ secrets.SSH_KEY }}
      #     name: id_rsa # optional
      #     known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Get the current branch name
        shell: bash
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
        id: myref

      - name: Template the Packer .j2 file
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: /home/runner/work/AzManagers.jl/AzManagers.jl/templates/cofii-base.json.j2
          output_file: /home/runner/work/AzManagers.jl/AzManagers.jl/templates/cofii-base.json
        env:
          SUBSCRIPTION_ID: "${{ secrets.SUBSCRIPTION_ID }}"
          TENANT_ID: "${{ secrets.TENANT_ID }}" 
          CLIENT_ID: "${{ secrets.CLIENT_ID }}"
          CLIENT_SECRET: "${{ secrets.CLIENT_SECRET }}"
          RESOURCE_GROUP: "${{ matrix.os }}-${{ matrix.julia-version }}-${{ github.run_id }}"
          JULIA_VERSION: "${{ matrix.julia-version }}"
          SIG_NAME: "sig${{ github.run_id }}${{ matrix.julia-version }}"
          PUBLIC_IP: true
          BRANCH_NAME: "${{ steps.myref.outputs.branch }}"
          SSH_PASS: "${{ secrets.SSH_PASSWORD }}"

      - name: Install Packer
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install packer

      - name: Build Packer Image
        run: |
          packer build -color=false -force -timestamp-ui /home/runner/work/AzManagers.jl/AzManagers.jl/templates/cofii-base.json
        # can remove -force and should make each image name unique
        # will need to make sure we are adding the correct branch of AzManagers to the image we want to test

      - uses: julia-actions/setup-julia@latest
        with:
          version: ${{ matrix.julia-version }}

      - uses: julia-actions/julia-buildpkg@latest #change lastest to master

      - uses: julia-actions/julia-runtest@latest #change lastest to master
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          JULIA_VERSION: "${{ matrix.julia-version }}"
          RESOURCE_GROUP: "${{ matrix.os }}-${{ matrix.julia-version }}-${{ github.run_id }}"
          SS_TEMPLATE_JSON: ${{ secrets.SS_TEMPLATE_JSON_3 }}
          IMAGE_NAME: "unit-test-image"
          IMAGE_GALLERY: "sig${{ github.run_id }}${{ matrix.julia-version }}"

      - uses: julia-actions/julia-processcoverage@v1

      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info

      - name: Delete CI Resource Group
        run: |
          az group delete -n "${{ matrix.os }}-${{ matrix.julia-version }}-${{ github.run_id }}" --yes
        if: ${{ always() }}
